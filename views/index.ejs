<%- include('partials/header') %>

<script src="https://cdn.socket.io/4.7.5/socket.io.js"></script>

            <h1>Home</h1>
            <p>Welcome to the home page, <%= user.username %> (<%= user.userid %>)!</p>

            <p>Authenticated!</p>
            <p>Socket ID: <span id="socketId"></span></p>
            <p>Username: <span id="username"></span></p>

            <ul id="messages"></ul>

                <input class="input" id="sckt_msg" autocomplete="off" /><button id="sendbutton">Send</button><button id="stopbutton">Stop</button>

                <div id="map" class="map"></div>
                <script>
              
                    const attribution = new ol.control.Attribution({
                      collapsible: false,
                    });

                    ol.Map.prototype.addMarker = function(lonlat, style) {

                        var feature = new ol.Feature(new ol.geom.Point(ol.proj.fromLonLat(lonlat, this.getView().getProjection())));

                        const iconStyle = new ol.style.Style({
                            image: new ol.style.Icon({
                                anchor: [0.5, 46],
                                anchorXUnits: 'fraction',
                                anchorYUnits: 'pixels',
                                src: 'poilloi_pin.png',
                            }),
                        });

                        if (style === undefined) {
                            //var kml = new ol.format.KML().writeFeatures([feature]);
                            //kmlFeature = new ol.format.KML().readFeature(kml);
                            //feature.setStyle(kmlFeature.getStyle());
                            feature.setStyle(iconStyle);
                        } else {
                            feature.setStyle(style);
                        }

                        var layer = new ol.layer.Vector({
                            source: new ol.source.Vector({
                                features: [feature]
                            })
                        });
                        this.addLayer(layer);

                        return layer; // e.g. to allow it to be removed

                    }
              
                    const osm_map = new ol.Map({
                      layers: [
                        new ol.layer.Tile({
                            source: new ol.source.OSM()
                        })
                      ],
                      controls: ol.control.defaults.defaults({attribution: false}).extend([attribution]),
                      target: 'map',
                      view: new ol.View({
                        constrainResolution: true,
                        center: ol.proj.fromLonLat([16.62662018, 49.2125578]),
                        zoom: 14
                      })
                    });
                  </script>

            <script>
                const socket = io();
                const socketIdSpan = document.getElementById("socketId");
                const usernameSpan = document.getElementById("username");
                
                let watch_id;
                let current_lat = 0.0;
                let current_lon = 0.0;
      
                socket.on('connect', () => {
                  socketIdSpan.innerText = socket.id;
      
                  socket.emit('whoami', (username) => {
                    usernameSpan.innerText = username;
                  });
                });
                socket.on('poi_list', (data) => {
                    socketIdSpan.innerText = socketIdSpan.innerText + '\n' + data.name;
                    var poi_coords = JSON.parse(data.coords);
                    osm_map.addMarker([poi_coords.coordinates[0], poi_coords.coordinates[1]]);
                    console.log("trying to add "+poi_coords.coordinates[0]);
      
                });

                var el = document.getElementById("sendbutton");
                if (el.addEventListener){
                    el.addEventListener("click", sendMessage, false);
                }else if (el.attachEvent){
                    el.attachEvent('onclick', sendMessage);
                }

                var el = document.getElementById("stopbutton");
                if (el.addEventListener){
                    el.addEventListener("click", stopMessage, false);
                }else if (el.attachEvent){
                    el.attachEvent('onclick', stopMessage);
                }

                function sendMessage() {
                    if (navigator.geolocation) {
                        navigator.geolocation.getCurrentPosition(initPosition, error);
                        watch_id = navigator.geolocation.watchPosition(showPosition, error);
                    } else {
                        document.getElementById('sckt_msg').value = "Geolocation is not supported by this browser.";
                    }
                }

                function stopMessage() {

                    if (navigator.geolocation) {
                        navigator.geolocation.clearWatch(watch_id);
                    }
                } 

                function showPosition(position) {
                    const crd = position.coords;
                    new_lat = Math.round(crd.latitude*100000)/100000
                    new_lon = Math.round(crd.longitude*100000)/100000

                    if (current_lat === new_lat && current_lon === new_lon) {
                    }else{
                        socket.emit('new message', JSON.stringify({ "lat": new_lat , "lon": new_lon }));
                        current_lat = new_lat;
                        current_lon = new_lon;
                    }
                }

                function initPosition(position) {
                    const crd = position.coords;
                    new_lat = Math.round(crd.latitude*100000)/100000;
                    new_lon = Math.round(crd.longitude*100000)/100000;
                    
                    socket.emit('init position', JSON.stringify({ "lat": new_lat , "lon": new_lon }));
                    current_lat = new_lat;
                    current_lon = new_lon;
                    init_Map();
                }

                function error(err) {
                    console.error(`ERROR(${err.code}): ${err.message}`);
                }

                function init_Map() {

                    osm_map.getView().animate({center: ol.proj.fromLonLat([current_lon, current_lat])}, {zoom: 13});

                }
                </script>








<%- include('partials/footer') %>